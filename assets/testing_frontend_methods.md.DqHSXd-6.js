import{_ as e,c as t,o as a,a2 as i}from"./chunks/framework.CkvUSOVT.js";const m=JSON.parse('{"title":"Мой подход к тестированию","description":"","frontmatter":{},"headers":[],"relativePath":"testing/frontend/methods.md","filePath":"testing/frontend/methods.md"}'),n={name:"testing/frontend/methods.md"},l=i('<h1 id="мои-подход-к-тестированию" tabindex="-1">Мой подход к тестированию <a class="header-anchor" href="#мои-подход-к-тестированию" aria-label="Permalink to &quot;Мой подход к тестированию&quot;">​</a></h1><h2 id="классификация-тестов" tabindex="-1">Классификация тестов: <a class="header-anchor" href="#классификация-тестов" aria-label="Permalink to &quot;Классификация тестов:&quot;">​</a></h2><ul><li>End to end</li><li>Integration</li><li>Unit</li></ul><h2 id="unit-тесты" tabindex="-1">Unit тесты <a class="header-anchor" href="#unit-тесты" aria-label="Permalink to &quot;Unit тесты&quot;">​</a></h2><p>В качестве unit&#39;а используем компонент.</p><p>Тестируем только входные и выходные параметры:</p><ul><li>props</li><li>emits</li><li>корректность отрисованного html</li><li>вызовы api</li><li>изменения store</li></ul><p>Не тестируем все, что находится внутри компонента:</p><ul><li>computed</li><li>methods</li><li>watcher</li><li>переменные и их значения</li></ul><p>Если кажется, что какая-то логика компонента должна быть протестирована отдельно, то нужно рассмотреть возможность разбиения компонента на несколько или выноса этой логики в отдельную функцию, которая будет импортироваться в компонент.</p><p>Unit тесты пишем с использованиме jest.</p><h2 id="интеграционные-тесты" tabindex="-1">Интеграционные тесты <a class="header-anchor" href="#интеграционные-тесты" aria-label="Permalink to &quot;Интеграционные тесты&quot;">​</a></h2><p>В качесте тестируемой единицы выступает страница приложения.</p><p>Тестируем различные flow пользователя на странице.</p><p>Для интеграционного тестирования используем cypress.</p><h2 id="end-to-end" tabindex="-1">End to end <a class="header-anchor" href="#end-to-end" aria-label="Permalink to &quot;End to end&quot;">​</a></h2><p>Тестируем flow пользователя в рамках приложения.</p><p>Для end to end тестирования используем cypress.</p>',18),o=[l];function r(d,s,h,p,c,_){return a(),t("div",null,o)}const f=e(n,[["render",r]]);export{m as __pageData,f as default};
