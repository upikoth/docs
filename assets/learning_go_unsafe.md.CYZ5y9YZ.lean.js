import{_ as a,c as n,a0 as i,o as t}from"./chunks/framework.D-WqjATM.js";const d=JSON.parse('{"title":"Unsafe","description":"","frontmatter":{},"headers":[],"relativePath":"learning/go/unsafe.md","filePath":"learning/go/unsafe.md"}'),l={name:"learning/go/unsafe.md"};function o(s,e,r,f,p,u){return t(),n("div",null,e[0]||(e[0]=[i('<h1 id="unsafe" tabindex="-1">Unsafe <a class="header-anchor" href="#unsafe" aria-label="Permalink to &quot;Unsafe&quot;">​</a></h1><p>Зачем нужна библиотека:</p><ol><li>Можно повысить производительность приложения</li><li>Работа с ОС</li><li>Работа с кодом из C</li></ol><p>Библиотека позволяет обращаться напрямую к участку памяти. Так как это прямое обращение к участку памяти, мы не знаем каких типов данные там хранятся.</p><p>Но данные можно достать, привести к определенному типу и получить значения.</p><ul><li>unsafe.Pointer</li><li>unsafe.Sizeof</li><li>unsafe.Offsetof</li><li>unitptr - числовое представление указателя, для операций с указателями. Не нужно хранить это значение, чтобы не почистил GC</li></ul><p>Что надо запомнить:</p><ol><li>Приведение unitptr и обратно в unsafe.Pointer должно быть выполнено одной строкой, при этом допускаются только арифметические операции</li></ol>',8)]))}const m=a(l,[["render",o]]);export{d as __pageData,m as default};
